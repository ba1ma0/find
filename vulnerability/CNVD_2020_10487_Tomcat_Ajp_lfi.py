#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os,time,datetime,subprocess,shlex
from module import  printc
#主要使用执行命令,并且返回命令形如  python2  /Users/play/github/find/vulnerability/CNVD-2020-10487/CNVD-2020-10487.py 127.0.0.1 -p 8009  -f WEB-INF/web.xml
def command(target):
    path        =   os.getcwd()   #
    file_path   =   os.path.join(path,"vulnerability","CNVD-2020-10487","CNVD-2020-10487.py")
    command     = "python2  {file_path}  -p 8009  -f WEB-INF/web.xml {target}".format(file_path=file_path,target=target)
    # print(command)
    #command     =  "python3 /Users/play/github/find/vulnerability/Joomla_3_4_6_RCE.py -t https://www.baidu.com  -c"
    return command

#读取文件每一行并将文件内容存放在列表中
def content2List(add):
    # cwd=os.getcwd()
    dirList=[]
    # add=cwd+"\\dict\\directory.txt"
    f=open(add,"rb")
    for line in f.readlines():
        line = str(line)
        line = line.replace("\\r","")
        line = line.replace("\\n","")
        line = line.replace("b\'","")
        line = line.replace("\'","")
        dirList.append(str(line))
        #print(str(line))
    return dirList
#返回数字 1 执行成功且没有超时 2执行命令超时且命令没有执行成功 3 执行命令超时且没有回显
def execute_command(cmdstring, timeout=3):
    return_code = 1
    cmdstring = shlex.split(cmdstring)
    flag  = "Connection refused"
    if timeout:
        end_time = datetime.datetime.now() + datetime.timedelta(seconds=timeout)
    sub  = subprocess.Popen(cmdstring, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    while sub.poll() is None:
        time.sleep(0.1)
        if timeout:
            if end_time <= datetime.datetime.now():
                res   = sub.stdout()
                line = str(sub.stdout.readlines())
                if flag in line:
                     return_code = 2
                else:
                    return_code = 3
                sub.kill()
    return return_code

  # 执行命令并且获取执行效果
  # shell_cmd = 'python3 subprogram.py'
  #   cmd = shlex.split(shell_cmd)
  #   p = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
  #   while p.poll() is None:
  #       line = p.stdout.readlines()
  #       line = line.strip()
  #       if line:
  #           print('Subprogram output: [{}]'.format(line))
  #   if p.returncode == 0:
  #       print('Subprogram success')
  #   else:
  #       print('Subprogram failed')

#此函数判断站点是否有漏洞,如果有漏洞则返回1否则返回0
def isVuln(host):
    try:
        flag = 1
        current_time = time.strftime("%Y-%m-%d %X",time.localtime())
        msg          = "[{current_time}] Starting detecting {host}".format(current_time=current_time,host=host)
        printc.printf(msg,"yellow")
        command1  = command(host)
        current_time = time.strftime("%Y-%m-%d %X",time.localtime())
        msg       ="[{current_time}] 执行命令 {command1}".format(current_time=current_time,command1=command1)
        printc.printf(msg,"yellow")
        if execute_command(command1) == 1:
            flag     = 0
        else:
            flag     = 1
        pass
    except Exception as e:
        raise e
    finally:
        current_time = time.strftime("%Y-%m-%d %X",time.localtime())
        if flag == 1:
            msg          = "[{current_time}] {host} is vulnerable to CNVD-2020-10487 ".format(current_time=current_time,host=host)
            printc.printf(msg,"red")
        else:
            msg          = "[{current_time}] {host} is  safe to CNVD-2020-10487 ".format(current_time=current_time,host=host)
            printc.printf(msg,"green")
        return flag
#传入参数 res={"safe":[],"vuln":[]}
def printInfo(res):
    safe = res["safe"]
    vuln = res["vuln"]
    #有漏洞的主机如下
    msg  = "[+] 有漏洞的主机如下"
    printc.printf(msg,"green")
    for v in vuln:
        msg = "[+] "+ str(v)
        printc.printf(msg,'yellow')
    #没有有漏洞的主机如下
    msg  = "[-] 安全的主机如下"
    printc.printf(msg,"green")
    for s in safe:
        msg = "[-] "+ str(s)
        printc.printf(msg,'yellow')


if __name__=='__main__':
    #try:
         cmd  = "python2  /Users/play/github/find/vulnerability/CNVD-2020-10487/CNVD-2020-10487.py 8.8.8.8  -p 8009  -f WEB-INF/web.xml"
         cmd1 = shlex.split(cmd)
         completed=subprocess.run(cmd1, stdin=None, input=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, capture_output=True, shell=False, cwd=None,
               timeout=2, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None)
         print('returncode:', completed.returncode)
         print()
         #out_bytes = subprocess.check_output(cmd, timeout=3)
         #
         # subprocess.getoutput(cmd,timeout=3)
         # subprocess
    # except subprocess.CalledProcessError as e:
    #     out_bytes = e.output  # Output generated before error
    #     code = e.returncode  # Return code
    #     print(code)
    #     print(out_bytes)



